pipeline {
    agent any
        parameters {
        listGitBranches branchFilter: '.*', credentialsId: 'Jenkins-SA', defaultValue: '', name: 'Branch_Name', quickFilterEnabled: true, remoteURL: 'https://github.com/LifeStanceHealth/polaris', selectedValue: 'NONE', sortMode: 'NONE', tagFilter: '*', type: 'PT_BRANCH'
        }
        environment {
        USER_CREDENTIALS = credentials('dw_ad')
        DEV_HOST = "dev-app-1.internallifestance.com"
        QA_HOST = "qa-app-1.internallifestance.com"  
        branch_artifact_name = sh (script: 'echo ${Branch_Name} | rev | cut -d/ -f1 | rev' , returnStdout: true).trim()    
        branch_Id = sh (script: 'echo ${Branch_Name} |cut -d/ -f3-9' , returnStdout: true).trim()
    }
    options {
      disableConcurrentBuilds()  
    }
    stages {
          stage('Git Checkout') {
          steps {
                git branch: "$branch_Id", credentialsId: 'GITHUB-SA', url: 'git@github.com:LifeStanceHealth/polaris.git'
            }
        }
         stage('Build') {
            steps {
                echo "Installing packages"
                sh 'bundle install'
            }
        }
        stage('UnitTest') {
            steps {
                echo "Running Unit Tests"                               
                sh "cp -f /lfs/secrets/test.key config/credentials/"
                sh "cp -f /lfs/secrets/wicked_pdf.rb config/initializers/"
                sh "cp -f /lfs/secrets/database.yml config/"
                sh "cp -f /lfs/certs/private.key ./"
                sh "cp -f /lfs/certs/advancedmd-pub-cert.pem ./"
                sh '''
                   sed -i "s/polaris_test/polaris_temp_$RANDOM/g" config/database.yml 
                   sed -i "s/polaris_dw_test/polaris_dw_temp_$RANDOM/g" config/database.yml                    
                   cp -f /lfs/secrets/redis.yml config/
                   bin/rails db:migrate:reset RAILS_ENV=test
                   EXIT_CODE=0
                   RAILS_ENV='test' bundle exec rspec || EXIT_CODE=$?
                   if [ $EXIT_CODE -eq 0 ]; then 
                      echo "Unit Tests Successfull"
                   else
                      echo "Tests Failed"
                   fi
                   bin/rails db:drop RAILS_ENV=test
                '''
            }
      }
        stage('Packaging Application') {
            steps {
                sh 'rm -f ror-*.zip'
                sh 'zip -r ror-$branch_artifact_name-$BUILD_ID.zip * -x Jenkinsfile'
                sh 'curl -u $USER_CREDENTIALS_USR:$USER_CREDENTIALS_PSW -T ror-$branch_artifact_name-$BUILD_ID.zip http://mgmt-artifactory-1.internallifestance.com:8081/artifactory/lfs-local-repo/lfs/ror/$branch_artifact_name-$BUILD_ID/'
            }
        }
        stage('Select Env to Deploy'){
            steps{
              script {
                  try {
                    timeout(time: 5, unit: 'MINUTES') {
                      script{
                          def environment = input message: "Select an Environment to Deploy?", ok: "Select", parameters: [
                          choice(name: 'environment', choices: ['Nothing','Dev','QA'], description: 'Please select the environment to deploy')
                          ]
                          env.environment = environment
                          echo "Environment selected: $environment"
                          }
                       }
                    }
                    catch(Exception err){
                        env.environment = "Nothing"
                    }
                publishHTML(target: [allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'coverage', reportFiles: 'index.html', reportName: 'Rspec Test Results'])     
                }
            }
        }

        stage ('ENV Selected') {
          parallel {
            stage('Dev') {
              when {
                equals expected: 'Dev', actual: environment
              }
              steps {
                script {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                  echo 'Deploying to DEV Environment'
                  sh 'ssh -vtt -o StrictHostKeyChecking=no $DEV_HOST "/lfs/scripts/deploy.sh $USER_CREDENTIALS_USR $USER_CREDENTIALS_PSW $branch_artifact_name $BUILD_ID"'
                  }
                }
              }
            }
            stage('QA') {
              when {
                equals expected: 'QA', actual: environment
              }
              steps {
                script {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                  echo 'Deploying to QA Environment'
                  sh 'ssh -vtt -o StrictHostKeyChecking=no $QA_HOST "/lfs/scripts/deploy.sh $USER_CREDENTIALS_USR $USER_CREDENTIALS_PSW $branch_artifact_name $BUILD_ID"'
                  }
                }
              }
            }
          }
        }
    }
}
